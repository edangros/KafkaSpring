package com.inspien.kafka.connect;

import java.util.HashMap;
import java.util.Map;

import com.inspien.kafka.connect.spring.RESTApplication;

import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.context.ConfigurableApplicationContext;

/**
 * Handles Spring APIs generated by Kafka Connect Prevents multiple application
 * to be launched by multiple tasks generated in Connect runtime This Uses
 * Singleton pattern with key-value dictionary
 */
public class SpringAPIHandler {
    private SpringAPIHandler() {
    }

    private static HashMap<String, ConfigurableApplicationContext> contexts;

    /**
     * Run API, preventing multiple launch
     * 
     * @param name
     * @param configs
     * @return
     */
    public static ConfigurableApplicationContext runAPI(String name, Map<String,Object> configs) {

        //if alread generated key, return it
        if (contexts.keySet().contains(name)) {
            return contexts.get(name);
        }
        //create new instance and run it
        ConfigurableApplicationContext context = new SpringApplicationBuilder(RESTApplication.class).properties(configs)
                .run();
        contexts.put(name, context);
        return context;
    }

    /**
     * Stop API. Do not throw exceptions even if received multiple stop calls.
     * 
     * @param name
     */
    public static void stopAPI(String name) {
        if (contexts.keySet().contains(name)){
            contexts.get(name).close();
            contexts.remove(name);
        }
    }

}
